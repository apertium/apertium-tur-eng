!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! lists 

n_rel = ara ast üst alt yak yan ; 

pers = p1 p2 p3 ;
agr = "p1.sg" "p1.pl" "p2.sg" "p2.pl" "p3.sg" "p3.pl" ;
nbr = sg pl sp ND ;
cas = nom acc dat gen loc ins abl ;
gen = m f mf GD ; 
tam = aor pres prog ifi ;
loc = abl loc ; 
det = DET ;
ger = ger ; 
func = attr advl subst ;
poss = px1sg px2sg px3sp px1pl px2pl px3pl ;
t_det = pos def ind qnt ;
t_prop = ant top cog ;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! tag ordering
! defines the order of tags in the phrase or terminal and the output
S: _ ; 

Cl: _  ;
ClQst: _ ; 

VP: _.tam.agr ; 
VPsay: _.tam.agr ; 
NP: _.nbr.cas  ;
AP: _  ; 
AdvP: _  ; 
AdnP: _.loc  ; 
AdnV: _; 
V: _.tam.agr ; 
Vsay: _.tam.agr ; 
Comp: _.poss ; 
N: _.nbr.cas  ; 
Ant: _.gen.nbr.cas ;
Cog: _.gen.nbr.cas ;
Top: _.nbr.cas ;
Qst: _ ; 

v: _  ; 
adj: _  ; 
np: _.t_prop.gen.nbr ; 
pr: _ ; 
cnjcoo: _ ; 
post: _ ; 
num: _ ; 
adv: _  ; 
det: _  ; 
cop: _.tam.agr ; 
n: _.nbr  ; 
prn: _.pers.nbr ; 
sent: _ ; 
ger: _.<ger> ; 
det: <det>.t_det.<sp> ; 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! mapping tables

tam > tam : aor pres, ifi past ;
poss > lem : px1sg my, px2sg your, px1pl our, px2pl your ;
cas > lem : ins with, dat to, gen of, abl from, loc in ; 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! macros 

POS: (if (1.poss = "")
            1(n)  
      else 
            [ *(det)[lem=1.poss>lem, t_det=pos] _ 1(n) ]) ; 

PREP: (if (1.cas = "")
            1(POS)  
      else-if (1.cas = acc)
            [ *(det)[lem="the", t_det=def] _ 1(n) ] 
      else 
            [ *(pr)[lem=1.cas>lem] _ 1(POS) ]) ; 

DET: (if (1.det = "")
            1(np) 
      else 
            [ *(det)[lem="the", t_det=def] _ 1(np) ]) ; 


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! production rules

S -> Cl sent { 1 _ 2 } ;

Cl -> VP { (if ( 1.pers not = p3 )         ! if the person of the first LU is not p3
               [ prpers@prn.[1.agr] _ ]    ! output a new LU with the lemma prpers
              )  
          1 } ; 

Cl -> NP cm VPsay.[tam].[agr] { 1 _ 3 } ; 

Cl -> NP.[cas] VP { 1 _ 2 } ; 

Cl -> ClQst { 1 } ;

ClQst -> NP.[cas] VP.[tam] Qst { do@vbdo.[2.tam] _ 1(PREP) _ 2 } ; 

VP -> NP.[cas] V.$tam.$agr { 2 _ 1(PREP) } ; 

!VP -> 1: AdvP VP.$tam.$agr { 1 _ 2 } ;

VP -> AdvP VP.$tam.$agr { (if (1.lem = "also") [ 1 _ 2 ]     ! FIXME: do something better here
                           else 
                              [ 2 _ 1 ]) } ;

VPsay -> Comp Vsay.$tam.$agr { 2 _ 1 } ;

V -> "v-ing" v.tv.$tam cop.$agr { 2 _ 1(ger)[tam=""] } |
     "v" v.tv.$tam cop.$agr { 1 } ;

Vsay -> söyle@v.tv.$tam.$agr { 1 } ; 

Comp -> NP AP ol@v.*.ger_past.[poss].acc.$poss { 1 _ 3 _ 2 } ; 

V -> v.tv.$tam.$agr { 1 } ;


AP -> adj { 1 } ; 

AP -> AP adj { 1 _ 2 } ; 

AdvP -> adv.$lem { 1 } ; 

AdvP -> NP post { 2 _ 1 } ;

AdvP -> NP $n_rel@n { 2 _ 1 } ;

AdnP -> NP $n_rel@n.[nbr].[loc].[func].$loc { 2 _ 1 } ;

AdnP -> Top.[nbr].[loc].[func].$loc { 1(PREP) } ;

AdnV -> v.*.gpr_rsub { 1 } ;

NP -> "ing-v" AdnV NP.$nbr.$cas { 2 _ 1 } |
      "v-which" AdnV NP.$nbr.$cas { 1 _ which@rel _ 2 } ;

NP -> NP cnjcoo NP.$nbr.$cas { 1 _ 2 _ 3 } ;

NP -> det.ind NP.$nbr.$cas { 1 _ 2 } ;

NP -> num NP.$nbr.$cas { 1 _ 2 } ;

NP -> AP det N.$nbr.$cas { 2 _ 1 _ 3 } ; 

NP -> AP N.$nbr.$cas { 1 _ 2 } ; 

NP -> n.attr N.$nbr.$cas { 1 _ 2 } ; 

NP -> AdnP NP.$nbr.$cas { 2 _ 1 } ;

NP -> N.$nbr.$cas { 1 } ; 

NP -> prn.pers.[pers].$nbr.$cas { 1 } ; 

NP -> prn.dem.$nbr.$cas { 1 } ; 

NP -> Ant.[gen].$nbr Cog.$cas { 1 _ 2 } ; 

NP -> Ant.[gen].$nbr.$cas { 1 } ;

NP -> Cog.[gen].$nbr.$cas { 1 } ;

NP -> N.*.gen N.$nbr.$cas { 2 _ of@pr _ 1(DET) }  ;

! rule for a single noun 
N -> n.$nbr.$cas { 1 } ; 

Ant -> np.ant.[gen].$nbr.$cas { 1 } ;

Cog -> np.cog.[gen].$nbr.$cas { 1 } ;

Top -> np.top.*.[func].$nbr.$cas { 1(DET) } ;

Top -> AP np.top.*.[func].$nbr.$cas { 1 _ 2(DET) } ;

Qst -> qst { } ;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
